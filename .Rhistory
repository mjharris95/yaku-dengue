n = length(unique(id)))
treated_names <- filter(match_df, is_control == "Treated") %>%
select(id) %>%
unlist() %>%
unique()
match_out <- list("table" = match_tab,
"match_names" = matched_names,
"df" = match_df,
"treated_names" = treated_names,
"match_obj" = match_res,
"balance" = bal_calc,
"abs_bal" = abs_bal_calc,
"match_list" = matched_prov)
if(plot_bal == TRUE){
balance_plot(unmatch_res, match_res, clim_df, lag_num, file_prefix, years, year_ind)
balance_plot2(match_out, lag_num, file_prefix, years, year_ind)
climts_plot(match_df, lag_num, file_prefix, years, year_ind)
}
if(plot_map == TRUE){
matchmap_plot(map, big_map, file_prefix, match_df,
cases_2023 = cases_2023, coastal_dist = coastal_dist)
}
return(match_out)
}
synth_fun <- function(case_df, match_out, file_prefix,
att_plot = FALSE,
spatt_plot = FALSE, map = NULL,
big_map = NULL,
lf_num=NA, r.max=5, use_clim=FALSE,
inc=FALSE, start_year = 2010,
end_week = 52, log_cases=FALSE,
give_group = c(), method="ife") {
if(spatt_plot==TRUE & is.null(map)){
stop("Provide map to plot")
}
incl_units <- c(match_out$treated_names, match_out$match_names)
if(use_clim == TRUE){
# read in climate
df <- fread("D:/Attribution/clim_df.csv") %>%
# filter to treated and matched control regions
filter(id %in% incl_units) %>%
filter(date <= as_date("2023-12-31")) %>%
# convert to epiweek
mutate(week=epiweek(date), year=year(date), month=month(date))  %>%
# sometimes the last few days of a year get assigned to first epiweek of following year
mutate(year = ifelse(week == 1 & month == 12, year+1, year)) %>%
group_by(week, year, id) %>%
summarize(mean_temp = mean(temp),
mean_rain = mean(rain),
mean_rel_r0 = mean(rel_r0)) %>%
left_join(case_df) %>%
filter(!is.na(mean_temp)) %>%
filter(id %in% incl_units) %>%
filter(year >= start_year) %>%
filter(week <= end_week) %>%
filter(year <= 2023)
} else{
df <- case_df %>%
filter(id %in% incl_units) %>%
mutate(mean_temp = NA, mean_rain = NA, mean_rel_r0 = NA) %>%
filter(year >= start_year)
}
time_df <- df %>%
mutate(time = week+(year-min(case_df$year))*100) %>%
select(time, week, year) %>%
distinct() %>%
arrange(time) %>%
ungroup() %>%
mutate(weeknum = row_number()) %>%
mutate(step = ceiling(weeknum/4)) %>%
mutate(step = as.integer(step))
# will use this in plotting later
year_ind <- sapply(unique(time_df$year), function(x) min(which(time_df$year==x))/4)
years <- unique(time_df$year)
# aggregate to 4-epiweek periods
df <- time_df %>%
right_join(df) %>%
group_by(id, step) %>%
summarize(cases = sum(cases),
inc = sum(inc),
mean_temp = mean(mean_temp),
mean_rel_r0 = mean(mean_rel_r0),
mean_rain = mean(mean_rain)*1000,
pop = mean(pop))
# when did the cyclone happen?
cyclone_step <- unique(time_df$step[time_df$week == 10 & time_df$year==2023])
# input a zero in weeks with missing data
df <- expand.grid(step=1:max(df$step), id=incl_units) %>%
left_join(df) %>%
mutate(cases = ifelse(is.na(cases), 0, cases),
inc = ifelse(is.na(inc), 0, inc)) %>%
mutate(int = ifelse(id %in% match_out$treated_names & step >= cyclone_step, 1, 0)) %>%
mutate(log_cases = log(cases+1)) %>%
left_join(., match_out$df %>% select(id, is_control) %>% distinct() %>% filter(is_control %in% c("Treated", "Matched Control")))
if(inc == TRUE){
df %<>% mutate(y = inc)
}
else if(log_cases == TRUE){
df %<>% mutate(y = log_cases)
}
else{
df %<>% mutate(y = cases)
}
if(is.na(lf_num)){
CV <- TRUE
r <- c(0,r.max)
}
else{
CV <- FALSE
r <- lf_num
}
if(length(give_group)==0){
df$group <- df$id
}
else{
df$group <- ifelse(df$id %in% give_group, "1", "0")
}
if(use_clim == TRUE){
gsynth_out <- df %>%
fect(y ~ int + mean_rel_r0 + mean_rain, data = .,
index=c("id", "step"),
force = "two-way",
method=method,
se = TRUE,
CV = CV, r = r,
seed = 514,
nboots = 1000,
group="group")
} else {
gsynth_out <- df %>%
fect(y ~ int, data = .,
index=c("id", "step"),
force = "two-way",
method=method,
se = TRUE,
CV = CV, r = r,
seed = 514,
nboots=1000,
group="group")
}
# calculate percent attributable cases based on bootstraps
# lapply(gsynth_out$Y.boot, function(x) rowSums(x[,gsynth_out$tr])) %>%
#   do.call(cbind, .) %>%
#   `/`(gsynth_out$att.boot * length(gsynth_out$tr), .) %>%
#   apply(1, function(x) quantile(x, c(.05, .95))) %>%
#   t() %>%
#   data.frame() %>%
#   rename(lower.pct = 1,
#          upper.pct = 2) %>%
#   cbind(obs = gsynth_out$Y.dat[,gsynth_out$tr] %>% rowSums()) %>%
#   mutate(lower.num = lower.pct*obs,
#          upper.num=upper.pct*obs)
if(att_plot==TRUE){
att_plot(df, gsynth_out, cyclone_step, file_prefix,
year_ind, unique(time_df$year), inc = inc)
}
if(spatt_plot==TRUE){
spatt_plot(case_df, gsynth_out,
map = map, big_map = big_map, file_prefix=file_prefix,
inc=inc)
}
att_nums <- att_print(gsynth_out, df, cyclone_step,
pop_df, inc = inc)
return(list("gsynth_obj"=gsynth_out,
"att_nums"=att_nums,
"year_ind"=year_ind,
"years"=years))
}
synth_out_allper <- synth_fun(case_df, match_out_allper, "adm3-allper",
att_plot=FALSE, spatt_plot=FALSE, map=per_map, big_map=dept_map, use_clim=TRUE,
start_year = 2016)
gsynth_obj<-synth_out_allper$gsynth_obj
# calculate percent attributable cases based on bootstraps
lapply(gsynth_out$Y.boot, function(x) rowSums(x[,gsynth_out$tr])) %>%
do.call(cbind, .) %>%
`/`(gsynth_out$att.boot * length(gsynth_out$tr), .) %>%
apply(1, function(x) quantile(x, c(.05, .95))) %>%
t() %>%
data.frame() %>%
rename(lower.pct = 1,
upper.pct = 2) %>%
cbind(obs = gsynth_out$Y.dat[,gsynth_out$tr] %>% rowSums()) %>%
mutate(lower.num = lower.pct*obs,
upper.num=upper.pct*obs)
`/`(1*8, 8)
`/`(8*10, 8)
gsynth_out$Y.boot[[1]]
gsynth_out$Y.boot[[1]] %>% dim()
# calculate percent attributable cases based on bootstraps
lapply(gsynth_out$Y.boot, function(x) rowSums(x[,1:length(gsynth_out$tr)])) %>%
do.call(cbind, .) %>%
`/`(gsynth_out$att.boot * length(gsynth_out$tr), .) %>%
apply(1, function(x) quantile(x, c(.05, .95))) %>%
t() %>%
data.frame() %>%
rename(lower.pct = 1,
upper.pct = 2) %>%
cbind(obs = gsynth_out$Y.dat[,gsynth_out$tr] %>% rowSums()) %>%
mutate(lower.num = lower.pct*obs,
upper.num=upper.pct*obs)
match_back <- function(x){
which(apply(gsynth_out$Y.dat,2,function(m) m==y)==56)
}
match_back(gsynth_out$Y.boot[[1]][,1])
match_back <- function(x){
which(apply(gsynth_out$Y.dat,2,function(m) m==x)==56)
}
match_back(gsynth_out$Y.boot[[1]][,1])
gsynth_out$Y.dat[.1]
gsynth_out$Y.dat[,1]
gsynth_out$Y.dat[,1] %>% length()
match_back <- function(x){
which(apply(gsynth_out$Y.dat,2,function(m) m==x)==104))
match_back <- function(x){
which(apply(gsynth_out$Y.dat,2,function(m) m==x)==104)}
match_back(gsynth_out$Y.boot[[1]][,1])
match_back <- function(x){
which(apply(gsynth_out$Y.dat,2,function(m) sum(m==x))==104)}
match_back(gsynth_out$Y.boot[[1]][,1])
match_back(gsynth_out$Y.boot[[1]][,1]) %in% gsynth_out$tr
for(i in 1:56){
if(!match_back(gsynth_out$Y.boot[[1]][,i]) %in% gsynth_out$tr){
print("whoops")
}
}
match_back(gsynth_out$Y.boot[[1]][,1]) %in% gsynth_out$tr
match_back(gsynth_out$Y.boot[[1]][,2]) %in% gsynth_out$tr
for(i in 1:56){
if(!sum(match_back(gsynth_out$Y.boot[[1]][,i]) %in% gsynth_out$tr)){
print("whoops")
}
}
for(i in 57:273){
if(sum(!match_back(gsynth_out$Y.boot[[1]][,i]) %in% gsynth_out$tr)<1){
print("whoops")
}
}
synth_out_allper
synth_out_allper$gsynth_obj$est.att
knitr::opts_chunk$set(eval=FALSE, echo=FALSE)
#evtools::install("C:/Users/mallj/GitHub/yaku-dengue/fect-edit")
library(tidyverse)
library(sf)
library(lubridate)
library(viridis)
library(cowplot)
library(data.table)
library(PanelMatch)
library(readxl)
library(gsynth)
library(ggplotify)
library(magrittr)
library(fect)
library(beepr)
library(xtable)
library(colorspace)
source("new-plots.R")
set.seed(0514)
# select districts with cases in 2023
case_df<-readRDS("PER_adm3_cases.RDS")
cases_2023<-case_df %>%
filter(year==2023) %>%
select(ubigeo) %>%
unlist() %>%
unique()
# read in departments and select coastal ones
coastal_dept <- c("TUMBES", "PIURA", "LAMBAYEQUE",
"CAJAMARCA", "LA LIBERTAD", "ANCASH",
"CALLAO", "LIMA",
"ICA", "AREQUIPA", "MOQUEGUA", "TACNA")
coastal_dist <- read_xlsx("maps/UBIGEODISTRITOS.XLSX") %>%
filter(NOMBDEP %in% coastal_dept) %>%
select(IDDIST) %>%
mutate(IDDIST = str_pad(IDDIST, 6, pad="0")) %>%
unlist()
# read in shapefiles
per_map<-read_sf("maps/CDC_Distritos.shp") %>%
rename(id = ubigeo)
dept_map <- read_sf("maps/CDC_Departamentos.shp")
case_df <- readRDS("PER_adm3_cases.RDS") %>%
filter(year <= 2023) %>%
rename(id = ubigeo)
pop_df <- read.csv("pop/PER3_pop.csv") %>%
rename(pop = sum,
id = ubigeo) %>%
mutate(id = str_pad(id, 6, pad="0"))
case_df %<>% left_join(pop_df) %>%
mutate(inc = cases / pop)
load("D:/Attribution/peru-main.RData")
synth_out_allper <- synth_fun(case_df, match_out_allper, "adm3-allper",
att_plot=TRUE, spatt_plot=FALSE, map=per_map, big_map=dept_map, use_clim=TRUE,
start_year = 2016)
18285/49528
41022/49528
knitr::opts_chunk$set(eval=FALSE, echo=FALSE)
#evtools::install("C:/Users/mallj/GitHub/yaku-dengue/fect-edit")
library(tidyverse)
library(sf)
library(lubridate)
library(viridis)
library(cowplot)
library(data.table)
library(PanelMatch)
library(readxl)
library(gsynth)
library(ggplotify)
library(magrittr)
library(fect)
library(beepr)
library(xtable)
library(colorspace)
source("new-plots.R")
set.seed(0514)
# select districts with cases in 2023
case_df<-readRDS("PER_adm3_cases.RDS")
cases_2023<-case_df %>%
filter(year==2023) %>%
select(ubigeo) %>%
unlist() %>%
unique()
# read in departments and select coastal ones
coastal_dept <- c("TUMBES", "PIURA", "LAMBAYEQUE",
"CAJAMARCA", "LA LIBERTAD", "ANCASH",
"CALLAO", "LIMA",
"ICA", "AREQUIPA", "MOQUEGUA", "TACNA")
coastal_dist <- read_xlsx("maps/UBIGEODISTRITOS.XLSX") %>%
filter(NOMBDEP %in% coastal_dept) %>%
select(IDDIST) %>%
mutate(IDDIST = str_pad(IDDIST, 6, pad="0")) %>%
unlist()
# read in shapefiles
per_map<-read_sf("maps/CDC_Distritos.shp") %>%
rename(id = ubigeo)
dept_map <- read_sf("maps/CDC_Departamentos.shp")
case_df <- readRDS("PER_adm3_cases.RDS") %>%
filter(year <= 2023) %>%
rename(id = ubigeo)
pop_df <- read.csv("pop/PER3_pop.csv") %>%
rename(pop = sum,
id = ubigeo) %>%
mutate(id = str_pad(id, 6, pad="0"))
case_df %<>% left_join(pop_df) %>%
mutate(inc = cases / pop)
load("D:/Attribution/peru-main.RData")
load("D:/Attribution/peru-main.RData")
load("D:/Attribution/peru-main.RData")
synth_out_allper_pre16 <- synth_fun(case_df, match_out_allper, "adm3-allper-pre16",
use_clim=TRUE,
att_plot=TRUE)
synth_out_allper_pre16$gsynth_obj$est.att
synth_out_allper_pre16$gsynth_obj$est.att %>% tail(11)
synth_out_allper_pre16$gsynth_obj$est.att %>% tail(11) %>% select(mid.num, lower.num, upper.num, recalc.p, obs)
synth_out_allper_pre16$gsynth_obj$est.att %>% tail(11) %>% select(mid.num, lower.num, upper.num, recalc.p, obs) %>% filter(recalc.p < .05)
synth_out_allper_pre16$gsynth_obj$est.att %>% tail(11) %>% select(mid.num, lower.num, upper.num, recalc.p, obs) %>% filter(recalc.p < .05) %>% colSums()
c(40349, 19983, 52962)/63686
c(19735/49274)/58193
c(19735,49274)/58193
knitr::opts_chunk$set(eval=FALSE, echo=FALSE)
#evtools::install("C:/Users/mallj/GitHub/yaku-dengue/fect-edit")
library(tidyverse)
library(sf)
library(lubridate)
library(viridis)
library(cowplot)
library(data.table)
library(PanelMatch)
library(readxl)
library(gsynth)
library(ggplotify)
library(magrittr)
library(fect)
library(beepr)
library(xtable)
library(colorspace)
source("new-plots.R")
# run through cross-validation procedure to get number of latent factors (2)
load("D:/Attribution/peru-main.RData")
match_out_allper$table
synth_out_allper$gsynth_obj$beta
synth_out_allper$gsynth_obj$beta.boot
synth_out_allper$gsynth_obj$est.beta
read.csv("D:/Attribution/anomaly_df.csv")
read.csv("D:/Attribution/anomaly_df.csv")->anomaly_df
anomaly_df %>% filter(country %in% c("PER3", "PER")) %>%
mutate(adm = ifelse(country=="PER3", "A. District", "B. Region")) %>%
ggplot()+
geom_histogram(aes(x=diff_rain*1000))+
xlab("Precipitation Anomaly")+
facet_wrap(~adm, scale="free_y")+
theme_classic()#+
ggsave("figs/anomaly_dist.pdf", height=4, width=8, units="in")
dir()
library(rgee)
library(tidyverse)
#ee = import("ee")
ee_Initialize(user = "malljes13", # saves to my personal Google Earth Engine project, set for different users
project="ee-dengue-climate")
ee = import("ee")
ee = import("ee")
library(rgee)
library(tidyverse)
ee = import("ee")
library(reticulate)
ee = import("ee")
ee_install(py_env = "rgee")
#ee = import("ee")
rgee:ee_install()
library(rgee)
#ee = import("ee")
rgee:ee_install()
ee_install()
ee = import("ee")
ee_clean_pyenv()
ee_install()
library(rgee)
ee_install()
library(reticulate)
library(rgee)
use_condaenv("rgee", conda = "auto",required = TRUE)
py_config()
py_available()
ee = import("ee")
ee$Authenticate()
use_condaenv("rgee", conda = "auto",required = TRUE)
use_condaenv("rgee", conda = "auto",required = TRUE)
library(rgee)
library(tidyverse)
library(reticulate)
use_condaenv("rgee", conda = "auto",required = TRUE)
ee = import("ee")
py_config()
py_available()
use_condaenv("rgee", conda = "auto",required = TRUE)
install.packages("reticulate")
library(reticulate)
library(rgee)
use_condaenv("rgee", conda = "auto",required = TRUE) #change "rgee" to whatever env you created in terminal, i.e. the one that has the earth engine api installed into it
py_config() #check python is there and has the correct architecture
py_available() #check TRUE
ee = import("ee") #import the Earth Engine library
ee$Authenticate()
#ee = import("ee")
ee_Initialize(user = "malljes13", # saves to my personal Google Earth Engine project, set for different users
project="ee-dengue-climate")
library(reticulate)
library(rgee)
library(tidyverse)
#ee = import("ee")
ee_Initialize(user = "malljes13", # saves to my personal Google Earth Engine project, set for different users
project="ee-dengue-climate")
#ee = import("ee")
ee_Initialize(user = "malljes13", # saves to my personal Google Earth Engine project, set for different users
project="ee-dengue-climate")
ee_check_init()
ee_Authenticate()
#ee = import("ee")
ee_Initialize(user = "malljes13", # saves to my personal Google Earth Engine project, set for different users
project="ee-dengue-climate")
ee = import("ee")
#ee = import("ee")
ee_Initialize(user = "malljes13", # saves to my personal Google Earth Engine project, set for different users
project="ee-dengue-climate")
ee_Authenticate()
e_clean_user_credentials()
ee_clean_user_credentials()
#ee = import("ee")
ee_Initialize(user = "malljes13", # saves to my personal Google Earth Engine project, set for different users
project="ee-dengue-climate")
ee_Authenticate()
#ee = import("ee")
ee_Initialize(user = "malljes13", # saves to my personal Google Earth Engine project, set for different users
project="ee-dengue-climate")
# read in temperature-dependent R0
aedes_r0 <- read.csv("AedesR0Out.csv")
setwd("C:/Users/mallj/Documents/yaku-dengue")
# read in temperature-dependent R0
aedes_r0 <- read.csv("AedesR0Out.csv")
temps_list <- ee$List(aedes_r0$temperature)
library(rgee)
ee_Authenticate()
ee_Initialize(user = "malljes13", project = "ee-dengue-climate")
library(rgee)
ee_clean_user_credentials()
ee_Authenticate()
ee_Initialize(user = "malljes13", project = "ee-dengue-climate")
credentials_path <- path.expand("~/.config/earthengine/")
unlink(credentials_path, recursive = TRUE)
list.files("~/.config/earthengine/")
library(rgee)
ee_Authenticate()
ee_Initialize(user = "malljes13", project = "ee-dengue-climate")
credentials_path
library(reticulate)
library(rgee)
ee = import("ee")
ee_install()
library(reticulate)
library(rgee)
library(reticulate)
library(rgee)
library(reticulate)
library(rgee)
library(tidyverse)
library(rgee)
reticulate::py_last_error()
ee = import("ee")
reticulate::py_last_error()
use_condaenv("rgee", required = TRUE)
use_condaenv("rgee", conda="auto" required = TRUE)
use_condaenv("rgee", conda="auto", required = TRUE)
library(reticulate)
use_condaenv("rgee", conda="auto", required = TRUE)
